<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>jesusc.github.io</groupId>
	<artifactId>puzzle-builder</artifactId>
	<version>1.0-SNAPSHOT</version>
	<name>Puzzle builder</name>
	<packaging>war</packaging>

	<properties>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<failOnMissingWebXml>false</failOnMissingWebXml>
		<vaadin.version>24.2.0</vaadin.version>

		<antlr.version>4.11.1</antlr.version>

	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-bom</artifactId>
				<type>pom</type>
				<scope>import</scope>
				<version>${vaadin.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>com.vaadin</groupId>
			<!-- Replace artifactId with vaadin-core to use only free components -->
			<artifactId>vaadin</artifactId>
		</dependency>

		<!-- Added to provide logging output as Flow uses -->
		<!-- the unbound SLF4J no-operation (NOP) logger implementation -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>

		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.0.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.github.models-lab.efinder</groupId>
			<artifactId>io.github.models-lab.efinder.emfocl</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>io.github.models-lab.efinder</groupId>
			<artifactId>io.github.models-lab.efinder.usemv</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.emfatic</groupId>
			<artifactId>org.eclipse.emfatic.core</artifactId>
			<version>1.0.0</version>

			<exclusions>
				<exclusion>
					<groupId>org.eclipse.platform</groupId>
					<artifactId>org.eclipse.core.runtime</artifactId>
				</exclusion>
			</exclusions>

		</dependency>

		<dependency>
			<groupId>org.eclipse.emf</groupId>
			<artifactId>org.eclipse.emf.ecore</artifactId>
			<version>2.23.0</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>31.0.1-jre</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.p2.repo</groupId>
			<artifactId>org.eclipse.ocl.xtext.completeocl</artifactId>
			<version>1.18.0.v20221201-0557</version>
		</dependency>

		<!-- LLM -->
		<dependency>
			<groupId>com.theokanning.openai-gpt3-java</groupId>
			<!-- <artifactId>{api|client|service}</artifactId> -->
			<artifactId>service</artifactId>
			<version>0.16.0</version>
		</dependency>


		<dependency>
			<groupId>io.github.models-lab.efinder</groupId>
			<artifactId>io.github.models-lab.efinder.usemv</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-runtime</artifactId>
			<version>${antlr.version}</version>
		</dependency>


		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>4.5.2</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>2.13.0</version>
		</dependency>
	</dependencies>

	<build>
		<defaultGoal>jetty:run</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>11.0.14</version>
				<configuration>
					<!--
                    Configures automatic reload of Jetty server
                    (with 2 second timeout) when new classes are compiled 
                    (e.g. by IDEs).
                    Should be disabeld when using a proper live reload system,
                    such as JRebel.
                    If using IntelliJ IDEA with autocompilation, this
                    might cause lots of unnecessary compilations in the
                    background. Consider using "0" and trigger restart manually
                    by hitting enter.
                    -->
					<scan>2</scan>
					<!-- Use war output directory to get the webpack files -->
					<webAppConfig>
						<allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
					</webAppConfig>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-maven-plugin</artifactId>
				<version>${antlr.version}</version>
				<executions>
					<execution>
						<id>antlr</id>
						<goals>
							<goal>antlr4</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<visitor>true</visitor>
				</configuration>
			</plugin>

			<!--
                Take care of synchronizing java dependencies and imports in
                package.json and main.js files.
                It also creates webpack.config.js if not exists yet.
            -->
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>${vaadin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-frontend</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.2</version>
			</plugin>

			<plugin>
				<groupId>org.openntf.maven</groupId>
				<artifactId>p2-layout-resolver</artifactId>
				<version>1.7.0</version>
				<extensions>true</extensions>
			</plugin>

		</plugins>
	</build>

	<!-- To handle Eclipse dependencies -->
	<pluginRepositories>
		<!-- the plugin is hosted in OpenNTF's Maven repository -->
		<pluginRepository>
			<id>artifactory.openntf.org</id>
			<name>artifactory.openntf.org</name>
			<url>https://artifactory.openntf.org/openntf</url>
		</pluginRepository>
	</pluginRepositories>

	<repositories>
		<repository>
			<id>org.eclipse.p2.repo</id>   <!-- defines the groupId to be used
			below -->
			<url>http://download.eclipse.org/releases/2023-09</url>
			<layout>p2</layout>
		</repository>
	</repositories>


	<profiles>
		<profile>
			<!-- Production mode is activated using -Pproduction -->
			<id>production</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.vaadin</groupId>
						<artifactId>vaadin-maven-plugin</artifactId>
						<version>${vaadin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>build-frontend</goal>
								</goals>
								<phase>compile</phase>
							</execution>
						</executions>
						<configuration>
							<productionMode>true</productionMode>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
